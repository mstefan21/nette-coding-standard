<?xml version="1.0"?>
<ruleset name="Nette">
	<description>The Nette Project coding standard.</description>

	<rule ref="PSR2">
		<exclude name="Generic.WhiteSpace.ScopeIndent"/>
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
		<exclude name="Generic.PHP.LowerCaseConstant"/>
		<exclude name="PEAR.Functions.FunctionCallSignature"/>
		<exclude name="PSR2.ControlStructures.SwitchDeclaration"/>
		<exclude name="Squiz.Scope.MethodScope"/>
		<exclude name="Generic.ControlStructures.InlineControlStructure.NotAllowed"/>
		<exclude name="Generic.Files.LineLength"/>
		<exclude name="PSR2.Classes.ClassDeclaration"/>
		<exclude name="PSR2.Classes.PropertyDeclaration.ScopeMissing"/>
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration"/>
	</rule>

	<rule ref="NetteStandard.Commenting">
		<exclude name="NetteStandard.Commenting.FileComment.Missing"/>
		<exclude name="NetteStandard.Commenting.ClassComment.Missing"/>
		<exclude name="NetteStandard.Commenting.FunctionComment.MissingParamComment"/>
		<exclude name="NetteStandard.Commenting.ClosingDeclarationComment.Missing"/>
		<exclude name="NetteStandard.Commenting.FunctionComment.SpacingAfterParamType"/>
		<exclude name="NetteStandard.Commenting.FunctionComment.SpacingAfterParamName"/>
		<exclude name="NetteStandard.Commenting.FunctionComment.EmptyThrows"/>
		<exclude name="NetteStandard.Commenting.FunctionComment.ParamCommentFullStop"/>
		<exclude name="NetteStandard.Commenting.LongConditionClosingComment.Missing"/>
	</rule>

	<rule ref="NetteStandard.Classes.ClassDeclaration">
		<properties>
			<property name="numBlankLinesBeforeClosingBrace">1</property>
		</properties>
	</rule>

	<rule ref="Generic.Classes.DuplicateClassName"/>

	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="80"/>
			<property name="absoluteLineLimit" value="160"/>
		</properties>
	</rule>
	<rule ref="Generic.Files.OneInterfacePerFile"/>
	<rule ref="Generic.Files.ByteOrderMark"/>

	<rule ref="Generic.Formatting.SpaceAfterCast"/>

	<rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.UpperCaseConstant"/>

	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

	<rule ref="MySource.Objects.AssignThis"/>

	<rule ref="PSR2.Files.EndFileNewline"/>

	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>
	<rule ref="Squiz.Classes.ValidClassName"/>

	<!-- Mismatch against PSR2 which needs to be fixed properly -->
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction">
		<severity>0</severity>
	</rule><!-- Mute; we ain't got no space in closure def --><!-- TODO: make sure it's not there -->
	<rule ref="PSR1.Classes.ClassDeclaration.MultipleClasses">
		<severity>0</severity>
	</rule><!-- we allow this for exceptions --><!-- TODO: make sure that only for exceptions -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements.SameLine">
		<severity>0</severity>
	</rule><!-- We use it (#2) --><!-- TODO: -->
	<rule ref="Squiz.ControlStructures.ControlSignature">
		<severity>0</severity>
	</rule><!-- Not allowed empty one-line catch--><!-- TODO: extends and fix -->
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace.ContentBefore">
		<severity>0</severity>
	</rule><!-- Allowed for empty catch blocks --><!-- TODO: should override and allow only this case -->

	<!-- Needs to be resolved -->
	<rule ref="NetteStandard.ControlStructures.WeakTypesComparisonsWithExplanation.Operator.T_IS_EQUAL">
		<severity>3</severity>
	</rule><!-- #5 -->
	<rule ref="NetteStandard.ControlStructures.WeakTypesComparisonsWithExplanation.Operator.T_IS_NOT_EQUAL">
		<severity>3</severity>
	</rule><!-- #5 -->
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing.Incorrect"/>
</ruleset>
